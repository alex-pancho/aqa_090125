"""
### **Завдання для розробника**
Реалізувати функцію `sum_numbers_in_list(input_list)`, яка приймає список рядків, 
де кожен рядок містить числа, розділені комами. Функція повинна повертати список 
із сум чисел для кожного рядка або відповідне повідомлення про помилку у 
випадку некоректних даних.

### **Вимоги до реалізації**
1. **Коректний вхід:**
   - Якщо елемент списку є рядком із числами, розділеними комами 
   (наприклад, `"1,2,3"`), функція повинна повернути їхню суму як ціле число.
   - Наприклад, `sum_numbers_in_list(["1,2,3", "4,0,6"]) → [6, 10]`.

2. **Некоректні рядки:**
   - Якщо рядок містить некоректні символи (наприклад, `"4/0,6"`, `"asas7,8,9"`), 
   функція повинна повернути `"Не можу це зробити!"` для цього елемента.

3. **Некоректні типи:**
   - Якщо елемент списку **не є рядком** (наприклад, число, функція або словник), 
   функція повинна повертати `"Не можу це зробити! AttributeError"`.

4. **Порожній список:**
   - Якщо передано порожній список `[]`, функція повинна викликати `ValueError`.

5. **Неправильний тип вхідних даних:**
   - Якщо передано не список (наприклад, `"21"` або `3`), функція повинна 
   викликати `ValueError`.

### **Очікувані результати тестів**
Функція повинна успішно проходити всі тестові випадки, наведені у класі 
`TestSumNumbersInList`.

#### **Приклади виклику функції:**
```python
sum_numbers_in_list(["1,2,3", "4,0,6"])  # [6, 10]
sum_numbers_in_list(["1,2,3", "asas7,8,9", "4,0,6"])  # [6, "Не можу це зробити!", 10]
sum_numbers_in_list(["1,2,3,4", 7])  # [10, "Не можу це зробити! AttributeError"]
sum_numbers_in_list([])  # ValueError
sum_numbers_in_list("21")  # ValueError
```

**Вимоги до коду:**
- Використовувати Python 3.
- Дотримуватись принципів чистого коду.
- Перевірити роботу функції за допомогою `unittest`.

"""
# Функція, яка приймає рядок і вираховує Його довжину.
# Строка повинна бути довжиною від 8 до 20 символів. Виводити помилку для невалідного рядка.

def check_string_length(s):
    if not isinstance(s, str):
        raise TypeError ("Помилка! Треба ввести рядок")
    length = len(s)
    if length < 8:
        raise TypeError ("Помилка! Мінімальна кількість символів - 8")
    if length > 20:
        raise TypeError ("Помилка! Максимальна кількість символів - 20")
    else:
        return "Все ок! Довжина рядка від 8 до 20 символів"


# Валідація емейлу
import re


def is_valid_email(email: str) -> bool:
    if not isinstance(email, str):
        return False
    pattern = r"^[\w\.-]+@[\w\.-]+\.\w+$"
    return bool(re.match(pattern, email))


# Функція, яка формує новий list,
# який містить лише змінні типу стрінг, які присутні в lst1. Дані в лісті можуть бути будь-якими

def filter_strings(lst):
    return [item for item in lst if isinstance(item, str)]