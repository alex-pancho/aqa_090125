import xml.etree.ElementTree as ET
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_file = "xml_search_Den.log"
logging.basicConfig(
    filename=log_file,
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    encoding="utf-8"
)

# –§–∞–π–ª XML
xml_file = "groups.xml"


def find_timing_exbytes(group_number):
    """–ò—â–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ timingExbytes/incoming –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É group/number"""
    try:
        tree = ET.parse(xml_file)
        root = tree.getroot()

        for group in root.findall(".//group"):
            number = group.find("number")
            if number is not None and number.text == str(group_number):
                timing_exbytes = group.find(".//timingExbytes/incoming")
                if timing_exbytes is not None:
                    result = timing_exbytes.text
                    logging.info(f"Group {group_number} -> incoming: {result}")
                    return result
                else:
                    logging.info(f"Group {group_number} -> incoming –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return None

        logging.info(f"Group {group_number} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None

    except ET.ParseError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ XML: {e}")
        return None
    except FileNotFoundError:
        logging.error(f"–§–∞–π–ª {xml_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None


# üî• –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞
group_to_find = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –¥–ª—è –ø–æ–∏—Å–∫–∞: ")
result = find_timing_exbytes(group_to_find)

if result:
    print(f"\n‚úÖ –ó–Ω–∞—á–µ–Ω–∏–µ incoming –¥–ª—è –≥—Ä—É–ø–ø—ã {group_to_find}: {result}")
else:
    print(f"\n‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä—É–ø–ø—ã {group_to_find} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
1