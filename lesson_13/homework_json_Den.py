import os
import json
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_file = "json_validation_Den.log"
logging.basicConfig(
    filename=log_file,
    level=logging.ERROR,
    format="%(asctime)s - %(levelname)s - %(message)s",
    encoding="utf-8"
)

# –ü–∞–ø–∫–∞ —Å JSON-—Ñ–∞–π–ª–∞–º–∏ (–∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å, –µ—Å–ª–∏ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è)
json_folder = r"C:\Users\cdo\Desktop\Hillel\autotesting_by_python\aqa_local_repo\aqa_090125\lesson_13"

# –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö JSON-—Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ
json_files = [f for f in os.listdir(json_folder) if f.endswith(".json")]

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ —Ñ–∞–π–ª—ã
if not json_files:
    print("‚ö†Ô∏è –í —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ –Ω–µ—Ç JSON-—Ñ–∞–π–ª–æ–≤! –ü—Ä–æ–≤–µ—Ä—å –ø—É—Ç—å.")
    exit(1)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã
invalid_files = []

print(f"\nüìÇ –ù–∞–π–¥–µ–Ω–æ JSON-—Ñ–∞–π–ª–æ–≤: {len(json_files)}")

for file in json_files:
    file_path = os.path.join(json_folder, file)

    try:
        with open(file_path, "r", encoding="utf-8") as f:
            json.load(f)  # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å JSON
        print(f"‚úÖ {file} - –≤–∞–ª–∏–¥–Ω—ã–π JSON")
    except json.JSONDecodeError as e:
        error_message = f"‚ùå {file} - –ù–ï–í–ê–õ–ò–î–ù–´–ô JSON! –û—à–∏–±–∫–∞: {e}"
        print(error_message)
        logging.error(error_message)
        invalid_files.append(file)

# –ò—Ç–æ–≥–æ–≤—ã–π –≤—ã–≤–æ–¥
if invalid_files:
    print("\n‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ JSON-—Ñ–∞–π–ª—ã! –û—à–∏–±–∫–∏ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –ª–æ–≥.")
else:
    print("\nüéØ –í—Å–µ —Ñ–∞–π–ª—ã –≤–∞–ª–∏–¥–Ω—ã!")

print(f"\nüìú –õ–æ–≥ –æ—à–∏–±–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {log_file}")
