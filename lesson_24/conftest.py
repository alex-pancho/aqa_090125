import pytest
import requests
from requests.auth import HTTPBasicAuth

# –õ–æ–≥—É—é—á–∞ —Ñ—ñ–∫—Å—Ç—É—Ä–∞ ‚Äî –ø–æ–∫–∞–∑—É—î –Ω–∞–∑–≤—É —Ç–µ—Å—Ç—É –Ω–∞ —Å—Ç–∞—Ä—Ç/–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
@pytest.fixture(scope="function", autouse=True)
def my_printable_fixture(request):
    print(f"üîπ Start test: {request.node.name}")
    yield
    print("üîª End of test")

# –ü–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–∞ —Ñ—ñ–∫—Å—Ç—É—Ä–∞ ‚Äî –ø—Ä–∏–∫–ª–∞–¥ —ñ–∑ —á–∏—Å–ª–∞–º–∏
@pytest.fixture(params=[1, 2, 3])
def my_fixture(request):
    param_value = request.param
    print(f"Setup with param value: {param_value}")
    return param_value * 2

# –ü–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–∞ —Ñ—ñ–∫—Å—Ç—É—Ä–∞ –¥–ª—è HTTP –º–µ—Ç–æ–¥—ñ–≤
@pytest.fixture(params=[requests.get, requests.post])
def http_method(request):
    return request.param

# –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
@pytest.fixture(scope='class')
def prepare_config():
    print("üîß –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó...")
    yield
    print("üßπ –û—á–∏—â–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó...")

# –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
@pytest.fixture(scope='class')
def prepare_database():
    print("üóÉÔ∏è –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...")
    yield
    print("üßº –û—á–∏—â–µ–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...")

# –î–æ–¥–∞—Ç–∫–æ–≤–∞ —Ñ—ñ–∫—Å—Ç—É—Ä–∞: –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—É (–º–æ–∂–µ –±—É—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ –æ–∫—Ä–µ–º–æ)
@pytest.fixture(scope="function")
def auth_headers():
    base_url = "http://127.0.0.1:8080"
    auth = HTTPBasicAuth("test_user", "test_pass")
    response = requests.post(f"{base_url}/auth", auth=auth)
    assert response.status_code == 200
    token = response.json().get("access_token")
    assert token, "–¢–æ–∫–µ–Ω –Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–æ"
    return {"Authorization": f"Bearer {token}"}
